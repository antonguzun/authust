use actix_http::Request;
use actix_web::body::BoxBody;
use actix_web::dev::{Service, ServiceResponse};
use actix_web::{http::header, test, web, App};
use rust_crud::apps::init_api_v1;
use rust_crud::common::{Config, Resources};
use rust_crud::usecases::user::entities::User;
use serde_json::json;

async fn refresh_db(resources: &Resources) -> () {
    let mut client = resources.db_pool.get().await.unwrap();
    let stmt = client
        .prepare(
            "CREATE TABLE IF NOT EXISTS users (
            user_id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            username text NOT NULL,
            password_hash text NOT NULL,
            enabled boolean NOT NULL,
            created_at timestamptz NOT NULL,
            updated_at timestamptz NOT NULL,
            is_deleted boolean NOT NULL
            );",
        )
        .await
        .unwrap();
    client.execute(&stmt, &[]).await.unwrap();
    let stmt = client.prepare("TRUNCATE users;").await.unwrap();
    client.execute(&stmt, &[]).await.unwrap();
    let stmt = client.prepare(
        "INSERT INTO users (user_id, username, password_hash, enabled, created_at, updated_at, is_deleted)
        VALUES 
        (1, 'Ivan', '1234', TRUE, '2016-06-22 22:10:25+03', '2016-06-22 22:10:25+03', FALSE), 
        (2, 'Anton', '1234', TRUE, '2022-06-22 22:10:25+00', '2022-06-22 22:10:25+00', FALSE), 
        (3, 'Godzilla', '1234', TRUE, '2022-06-22 22:10:25+00', '2022-06-22 22:10:25+00', FALSE)
        ON CONFLICT DO NOTHING"
    ).await.unwrap();
    client.execute(&stmt, &[]).await.unwrap();
}

async fn init_test_service(
) -> impl Service<Request, Response = ServiceResponse<BoxBody>, Error = actix_web::Error> {
    let config = Config::create_config();
    let resources = Resources::create_resources(&config).await;
    refresh_db(&resources).await;
    test::init_service(
        App::new()
            .app_data(config.clone())
            .data(resources.clone())
            .service(web::scope("/api/v1").configure(init_api_v1)),
    )
    .await
}

#[actix_web::test]
async fn test_get_user() {
    let mut app = init_test_service().await;
    let req = test::TestRequest::get().uri("/api/v1/user/1").to_request();
    let mut resp = test::call_service(&mut app, req).await;
    assert_eq!(resp.status(), 200)
}

#[actix_web::test]
async fn test_get_user_not_found() {
    let mut app = init_test_service().await;
    let req = test::TestRequest::get()
        .uri("/api/v1/user/999991")
        .to_request();
    let mut resp = test::call_service(&mut app, req).await;
    assert_eq!(resp.status(), 404);
}

#[actix_web::test]
async fn test_get_user_wrong_params() {
    let mut app = init_test_service().await;
    let req = test::TestRequest::get()
        .uri("/api/v1/user/sadf")
        .to_request();
    let mut resp = test::call_service(&mut app, req).await;
    // странно что web::Path приводит к 404 ошибке, а не к 400
    assert_eq!(resp.status(), 404);
}

#[actix_web::test]
async fn test_delete_user() {
    let mut app = init_test_service().await;

    let req = test::TestRequest::get().uri("/api/v1/user/3").to_request();
    let mut resp = test::call_service(&mut app, req).await;
    assert_eq!(resp.status(), 200);

    let req = test::TestRequest::delete()
        .uri("/api/v1/user/3")
        .to_request();
    let mut resp = test::call_service(&mut app, req).await;
    assert_eq!(resp.status(), 204);

    let req = test::TestRequest::get().uri("/api/v1/user/3").to_request();
    let mut resp = test::call_service(&mut app, req).await;
    assert_eq!(resp.status(), 404);
}

#[actix_web::test]
async fn test_delete_user_what_doesnt_exist() {
    let mut app = init_test_service().await;
    let req = test::TestRequest::delete()
        .uri("/api/v1/user/999")
        .to_request();
    let mut resp = test::call_service(&mut app, req).await;
    assert_eq!(resp.status(), 204)
}

#[actix_web::test]
async fn test_create_new_user() {
    let mut app = init_test_service().await;
    let request_body = json!({
        "username": "keker",
        "password": "test",
    });
    let req = test::TestRequest::post()
        .insert_header(header::ContentType::json())
        .uri("/api/v1/user/")
        .set_json(request_body)
        .to_request();
    let mut resp = test::call_service(&mut app, req).await;
    let status = resp.status();
    let user: User = test::read_body_json(resp).await;
    assert_eq!(user.username, "keker");
    assert_eq!(status, 201)
}
